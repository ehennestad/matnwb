# Run MATLAB tests across multiple MATLAB versions and create a draft release

name: Prepare release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number in major.minor.patch format, i.e 2.8.0'
        required: true
        type: string

jobs:
  validate_version:
    runs-on: ubuntu-latest
    steps:
      - name: Check version format
        run: |
          version="${{ github.event.inputs.version }}"
          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Input for 'version' ('$version') is not in the expected major.minor.patch format."
            exit 1
          fi
          echo "Version '$version' is valid."

  update_version:
    name: Create new draft relase for given version
    runs-on: ubuntu-latest
    needs: [validate_version]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Tag repository with version tag
        if: always()
        run: |
          git config user.name "${{ github.workflow }} by ${{ github.actor }}"
          git config user.email "<>"

          # Recreate the tag with a message
          git tag -a "${{ inputs.version }}" -m "Release ${{ inputs.version }}" 

          # Push the new tag to the remote repository
          git push origin "${{ inputs.version }}"

      - name: Update Contents.m file
        run: |
          # Read the template file
          template=$(cat .github/workflows/templates/contents_header_template.txt)
          
          # Get current date in DD-MMM-YYYY format
          date_string=$(date +"%d-%b-%Y")
          
          # Get current year
          year_number=$(date +"%Y")
          
          # Replace placeholders in template
          header="${template/\{\{version_number\}\}/${{ github.event.inputs.version }}}"
          header="${header/\{\{date_string\}\}/$date_string}"
          header="${header/\{\{year_number\}\}/$year_number}"
          
          # Extract the content after the header from the current Contents.m file
          content=$(awk '/^% -{10,}/{flag=1;next} flag{print}' Contents.m)
          
          # Combine new header with existing content
          echo "$header" > Contents.m
          echo "$content" >> Contents.m

      - name: Commit updated Contents.m file
        continue-on-error: true
        run: |
          git config user.name "${{ github.workflow }} by ${{ github.actor }}"
          git config user.email "<>"
          git add Contents.m
          git commit -m "Update version number in Contents.m"
          git fetch
          git push

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Generate tested with badge
        run: |
          pip install --upgrade setuptools
          pip install pybadges
          mkdir -p .github/badges/v${{ inputs.version }}
          python -c "
          from pybadges import badge
          with open('.github/badges/v${{ inputs.version }}/tested_with.svg', 'w') as f:
              f.write(badge(
                  left_text='tested with',
                  right_text='R2021a | R2021b | R2022a | R2022b | R2023a | R2023b | R20204 | R2024b',
                  right_color='green'
              ))
          "

      - name: Push to gh-badges
        run: |
          mkdir -p gh-badges/.github/badges/v${{ inputs.version }}
          cp .github/badges/v${{ inputs.version }}/tested_with.svg gh-badges/.github/badges/v${{ inputs.version }}/tested_with.svg
          cd gh-badges

          git config user.name "${{ github.workflow }} by ${{ github.actor }}"
          git config user.email "<>"

          # Only proceed with commit and push if changes are detected
          if [[ $(git add .github/badges/* --dry-run | wc -l) -gt 0 ]]; then
            git add .github/badges/*
            git commit -m "Update tested with badge for release"
            git push -f
          else
            echo "Nothing to commit"
          fi

      # Create the release
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          draft: true        
          generateReleaseNotes: true
          body: "![MATLAB Versions Tested](https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2Fehennestad%2Fmatnwb%2Fgh-badges%2F.github%2Fbadges%2F$v{{ inputs.version }}%2Ftested_with.svg)"
